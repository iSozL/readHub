{"version":3,"file":"vue-timeago.min.js","sources":["../node_modules/date-fns/is_date/index.js","../node_modules/date-fns/parse/index.js","../node_modules/date-fns/compare_desc/index.js","../node_modules/date-fns/difference_in_milliseconds/index.js","../node_modules/date-fns/difference_in_seconds/index.js","../node_modules/date-fns/difference_in_calendar_months/index.js","../node_modules/date-fns/compare_asc/index.js","../node_modules/date-fns/difference_in_months/index.js","../node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js","../node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js","../node_modules/date-fns/locale/en/build_format_locale/index.js","../node_modules/date-fns/locale/en/index.js","../node_modules/date-fns/distance_in_words/index.js","../node_modules/date-fns/distance_in_words_to_now/index.js","../src/converter.js","../src/index.js"],"sourcesContent":["/**\n * @category Common Helpers\n * @summary Is the given argument an instance of Date?\n *\n * @description\n * Is the given argument an instance of Date?\n *\n * @param {*} argument - the argument to check\n * @returns {Boolean} the given argument is an instance of Date\n *\n * @example\n * // Is 'mayonnaise' a Date?\n * var result = isDate('mayonnaise')\n * //=> false\n */\nfunction isDate (argument) {\n  return argument instanceof Date\n}\n\nmodule.exports = isDate\n","var isDate = require('../is_date/index.js')\n\nvar MILLISECONDS_IN_HOUR = 3600000\nvar MILLISECONDS_IN_MINUTE = 60000\nvar DEFAULT_ADDITIONAL_DIGITS = 2\n\nvar parseTokenDateTimeDelimeter = /[T ]/\nvar parseTokenPlainTime = /:/\n\n// year tokens\nvar parseTokenYY = /^(\\d{2})$/\nvar parseTokensYYY = [\n  /^([+-]\\d{2})$/, // 0 additional digits\n  /^([+-]\\d{3})$/, // 1 additional digit\n  /^([+-]\\d{4})$/ // 2 additional digits\n]\n\nvar parseTokenYYYY = /^(\\d{4})/\nvar parseTokensYYYYY = [\n  /^([+-]\\d{4})/, // 0 additional digits\n  /^([+-]\\d{5})/, // 1 additional digit\n  /^([+-]\\d{6})/ // 2 additional digits\n]\n\n// date tokens\nvar parseTokenMM = /^-(\\d{2})$/\nvar parseTokenDDD = /^-?(\\d{3})$/\nvar parseTokenMMDD = /^-?(\\d{2})-?(\\d{2})$/\nvar parseTokenWww = /^-?W(\\d{2})$/\nvar parseTokenWwwD = /^-?W(\\d{2})-?(\\d{1})$/\n\n// time tokens\nvar parseTokenHH = /^(\\d{2}([.,]\\d*)?)$/\nvar parseTokenHHMM = /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/\nvar parseTokenHHMMSS = /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/\n\n// timezone tokens\nvar parseTokenTimezone = /([Z+-].*)$/\nvar parseTokenTimezoneZ = /^(Z)$/\nvar parseTokenTimezoneHH = /^([+-])(\\d{2})$/\nvar parseTokenTimezoneHHMM = /^([+-])(\\d{2}):?(\\d{2})$/\n\n/**\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If all above fails, the function passes the given argument to Date constructor.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {Object} [options] - the object with options\n * @param {0 | 1 | 2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parse('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Parse string '+02014101',\n * // if the additional number of digits in the extended year format is 1:\n * var result = parse('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\nfunction parse (argument, dirtyOptions) {\n  if (isDate(argument)) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime())\n  } else if (typeof argument !== 'string') {\n    return new Date(argument)\n  }\n\n  var options = dirtyOptions || {}\n  var additionalDigits = options.additionalDigits\n  if (additionalDigits == null) {\n    additionalDigits = DEFAULT_ADDITIONAL_DIGITS\n  } else {\n    additionalDigits = Number(additionalDigits)\n  }\n\n  var dateStrings = splitDateString(argument)\n\n  var parseYearResult = parseYear(dateStrings.date, additionalDigits)\n  var year = parseYearResult.year\n  var restDateString = parseYearResult.restDateString\n\n  var date = parseDate(restDateString, year)\n\n  if (date) {\n    var timestamp = date.getTime()\n    var time = 0\n    var offset\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time)\n    }\n\n    if (dateStrings.timezone) {\n      offset = parseTimezone(dateStrings.timezone)\n    } else {\n      // get offset accurate to hour in timezones that change offset\n      offset = new Date(timestamp + time).getTimezoneOffset()\n      offset = new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE).getTimezoneOffset()\n    }\n\n    return new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE)\n  } else {\n    return new Date(argument)\n  }\n}\n\nfunction splitDateString (dateString) {\n  var dateStrings = {}\n  var array = dateString.split(parseTokenDateTimeDelimeter)\n  var timeString\n\n  if (parseTokenPlainTime.test(array[0])) {\n    dateStrings.date = null\n    timeString = array[0]\n  } else {\n    dateStrings.date = array[0]\n    timeString = array[1]\n  }\n\n  if (timeString) {\n    var token = parseTokenTimezone.exec(timeString)\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '')\n      dateStrings.timezone = token[1]\n    } else {\n      dateStrings.time = timeString\n    }\n  }\n\n  return dateStrings\n}\n\nfunction parseYear (dateString, additionalDigits) {\n  var parseTokenYYY = parseTokensYYY[additionalDigits]\n  var parseTokenYYYYY = parseTokensYYYYY[additionalDigits]\n\n  var token\n\n  // YYYY or ±YYYYY\n  token = parseTokenYYYY.exec(dateString) || parseTokenYYYYY.exec(dateString)\n  if (token) {\n    var yearString = token[1]\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length)\n    }\n  }\n\n  // YY or ±YYY\n  token = parseTokenYY.exec(dateString) || parseTokenYYY.exec(dateString)\n  if (token) {\n    var centuryString = token[1]\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length)\n    }\n  }\n\n  // Invalid ISO-formatted year\n  return {\n    year: null\n  }\n}\n\nfunction parseDate (dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null\n  }\n\n  var token\n  var date\n  var month\n  var week\n\n  // YYYY\n  if (dateString.length === 0) {\n    date = new Date(0)\n    date.setUTCFullYear(year)\n    return date\n  }\n\n  // YYYY-MM\n  token = parseTokenMM.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n    date.setUTCFullYear(year, month)\n    return date\n  }\n\n  // YYYY-DDD or YYYYDDD\n  token = parseTokenDDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    var dayOfYear = parseInt(token[1], 10)\n    date.setUTCFullYear(year, 0, dayOfYear)\n    return date\n  }\n\n  // YYYY-MM-DD or YYYYMMDD\n  token = parseTokenMMDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n    var day = parseInt(token[2], 10)\n    date.setUTCFullYear(year, month, day)\n    return date\n  }\n\n  // YYYY-Www or YYYYWww\n  token = parseTokenWww.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n    return dayOfISOYear(year, week)\n  }\n\n  // YYYY-Www-D or YYYYWwwD\n  token = parseTokenWwwD.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n    var dayOfWeek = parseInt(token[2], 10) - 1\n    return dayOfISOYear(year, week, dayOfWeek)\n  }\n\n  // Invalid ISO-formatted date\n  return null\n}\n\nfunction parseTime (timeString) {\n  var token\n  var hours\n  var minutes\n\n  // hh\n  token = parseTokenHH.exec(timeString)\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'))\n    return (hours % 24) * MILLISECONDS_IN_HOUR\n  }\n\n  // hh:mm or hhmm\n  token = parseTokenHHMM.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseFloat(token[2].replace(',', '.'))\n    return (hours % 24) * MILLISECONDS_IN_HOUR +\n      minutes * MILLISECONDS_IN_MINUTE\n  }\n\n  // hh:mm:ss or hhmmss\n  token = parseTokenHHMMSS.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseInt(token[2], 10)\n    var seconds = parseFloat(token[3].replace(',', '.'))\n    return (hours % 24) * MILLISECONDS_IN_HOUR +\n      minutes * MILLISECONDS_IN_MINUTE +\n      seconds * 1000\n  }\n\n  // Invalid ISO-formatted time\n  return null\n}\n\nfunction parseTimezone (timezoneString) {\n  var token\n  var absoluteOffset\n\n  // Z\n  token = parseTokenTimezoneZ.exec(timezoneString)\n  if (token) {\n    return 0\n  }\n\n  // ±hh\n  token = parseTokenTimezoneHH.exec(timezoneString)\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60\n    return (token[1] === '+') ? -absoluteOffset : absoluteOffset\n  }\n\n  // ±hh:mm or ±hhmm\n  token = parseTokenTimezoneHHMM.exec(timezoneString)\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60 + parseInt(token[3], 10)\n    return (token[1] === '+') ? -absoluteOffset : absoluteOffset\n  }\n\n  return 0\n}\n\nfunction dayOfISOYear (isoYear, week, day) {\n  week = week || 0\n  day = day || 0\n  var date = new Date(0)\n  date.setUTCFullYear(isoYear, 0, 4)\n  var fourthOfJanuaryDay = date.getUTCDay() || 7\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay\n  date.setUTCDate(date.getUTCDate() + diff)\n  return date\n}\n\nmodule.exports = parse\n","var parse = require('../parse/index.js')\n\n/**\n * @category Common Helpers\n * @summary Compare the two dates reverse chronologically and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return -1 if the first date is after the second,\n * 1 if the first date is before the second or 0 if dates are equal.\n *\n * @param {Date|String|Number} dateLeft - the first date to compare\n * @param {Date|String|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989 reverse chronologically:\n * var result = compareDesc(\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * )\n * //=> 1\n *\n * @example\n * // Sort the array of dates in reverse chronological order:\n * var result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareDesc)\n * //=> [\n * //   Sun Jul 02 1995 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Wed Feb 11 1987 00:00:00\n * // ]\n */\nfunction compareDesc (dirtyDateLeft, dirtyDateRight) {\n  var dateLeft = parse(dirtyDateLeft)\n  var timeLeft = dateLeft.getTime()\n  var dateRight = parse(dirtyDateRight)\n  var timeRight = dateRight.getTime()\n\n  if (timeLeft > timeRight) {\n    return -1\n  } else if (timeLeft < timeRight) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\nmodule.exports = compareDesc\n","var parse = require('../parse/index.js')\n\n/**\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @param {Date|String|Number} dateLeft - the later date\n * @param {Date|String|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * var result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\nfunction differenceInMilliseconds (dirtyDateLeft, dirtyDateRight) {\n  var dateLeft = parse(dirtyDateLeft)\n  var dateRight = parse(dirtyDateRight)\n  return dateLeft.getTime() - dateRight.getTime()\n}\n\nmodule.exports = differenceInMilliseconds\n","var differenceInMilliseconds = require('../difference_in_milliseconds/index.js')\n\n/**\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @param {Date|String|Number} dateLeft - the later date\n * @param {Date|String|Number} dateRight - the earlier date\n * @returns {Number} the number of seconds\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * var result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\nfunction differenceInSeconds (dirtyDateLeft, dirtyDateRight) {\n  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / 1000\n  return diff > 0 ? Math.floor(diff) : Math.ceil(diff)\n}\n\nmodule.exports = differenceInSeconds\n","var parse = require('../parse/index.js')\n\n/**\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * @param {Date|String|Number} dateLeft - the later date\n * @param {Date|String|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\nfunction differenceInCalendarMonths (dirtyDateLeft, dirtyDateRight) {\n  var dateLeft = parse(dirtyDateLeft)\n  var dateRight = parse(dirtyDateRight)\n\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear()\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth()\n\n  return yearDiff * 12 + monthDiff\n}\n\nmodule.exports = differenceInCalendarMonths\n","var parse = require('../parse/index.js')\n\n/**\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @param {Date|String|Number} dateLeft - the first date to compare\n * @param {Date|String|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * var result = compareAsc(\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * )\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * var result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\nfunction compareAsc (dirtyDateLeft, dirtyDateRight) {\n  var dateLeft = parse(dirtyDateLeft)\n  var timeLeft = dateLeft.getTime()\n  var dateRight = parse(dirtyDateRight)\n  var timeRight = dateRight.getTime()\n\n  if (timeLeft < timeRight) {\n    return -1\n  } else if (timeLeft > timeRight) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\nmodule.exports = compareAsc\n","var parse = require('../parse/index.js')\nvar differenceInCalendarMonths = require('../difference_in_calendar_months/index.js')\nvar compareAsc = require('../compare_asc/index.js')\n\n/**\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates.\n *\n * @param {Date|String|Number} dateLeft - the later date\n * @param {Date|String|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 7\n */\nfunction differenceInMonths (dirtyDateLeft, dirtyDateRight) {\n  var dateLeft = parse(dirtyDateLeft)\n  var dateRight = parse(dirtyDateRight)\n\n  var sign = compareAsc(dateLeft, dateRight)\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight))\n  dateLeft.setMonth(dateLeft.getMonth() - sign * difference)\n\n  // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n  // If so, result must be decreased by 1 in absolute value\n  var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign\n  return sign * (difference - isLastMonthNotFull)\n}\n\nmodule.exports = differenceInMonths\n","function buildDistanceInWordsLocale () {\n  var distanceInWordsLocale = {\n    lessThanXSeconds: {\n      one: 'less than a second',\n      other: 'less than {{count}} seconds'\n    },\n\n    xSeconds: {\n      one: '1 second',\n      other: '{{count}} seconds'\n    },\n\n    halfAMinute: 'half a minute',\n\n    lessThanXMinutes: {\n      one: 'less than a minute',\n      other: 'less than {{count}} minutes'\n    },\n\n    xMinutes: {\n      one: '1 minute',\n      other: '{{count}} minutes'\n    },\n\n    aboutXHours: {\n      one: 'about 1 hour',\n      other: 'about {{count}} hours'\n    },\n\n    xHours: {\n      one: '1 hour',\n      other: '{{count}} hours'\n    },\n\n    xDays: {\n      one: '1 day',\n      other: '{{count}} days'\n    },\n\n    aboutXMonths: {\n      one: 'about 1 month',\n      other: 'about {{count}} months'\n    },\n\n    xMonths: {\n      one: '1 month',\n      other: '{{count}} months'\n    },\n\n    aboutXYears: {\n      one: 'about 1 year',\n      other: 'about {{count}} years'\n    },\n\n    xYears: {\n      one: '1 year',\n      other: '{{count}} years'\n    },\n\n    overXYears: {\n      one: 'over 1 year',\n      other: 'over {{count}} years'\n    },\n\n    almostXYears: {\n      one: 'almost 1 year',\n      other: 'almost {{count}} years'\n    }\n  }\n\n  function localize (token, count, options) {\n    options = options || {}\n\n    var result\n    if (typeof distanceInWordsLocale[token] === 'string') {\n      result = distanceInWordsLocale[token]\n    } else if (count === 1) {\n      result = distanceInWordsLocale[token].one\n    } else {\n      result = distanceInWordsLocale[token].other.replace('{{count}}', count)\n    }\n\n    if (options.addSuffix) {\n      if (options.comparison > 0) {\n        return 'in ' + result\n      } else {\n        return result + ' ago'\n      }\n    }\n\n    return result\n  }\n\n  return {\n    localize: localize\n  }\n}\n\nmodule.exports = buildDistanceInWordsLocale\n","var commonFormatterKeys = [\n  'M', 'MM', 'Q', 'D', 'DD', 'DDD', 'DDDD', 'd',\n  'E', 'W', 'WW', 'YY', 'YYYY', 'GG', 'GGGG',\n  'H', 'HH', 'h', 'hh', 'm', 'mm',\n  's', 'ss', 'S', 'SS', 'SSS',\n  'Z', 'ZZ', 'X', 'x'\n]\n\nfunction buildFormattingTokensRegExp (formatters) {\n  var formatterKeys = []\n  for (var key in formatters) {\n    if (formatters.hasOwnProperty(key)) {\n      formatterKeys.push(key)\n    }\n  }\n\n  var formattingTokens = commonFormatterKeys\n    .concat(formatterKeys)\n    .sort()\n    .reverse()\n  var formattingTokensRegExp = new RegExp(\n    '(\\\\[[^\\\\[]*\\\\])|(\\\\\\\\)?' + '(' + formattingTokens.join('|') + '|.)', 'g'\n  )\n\n  return formattingTokensRegExp\n}\n\nmodule.exports = buildFormattingTokensRegExp\n","var buildFormattingTokensRegExp = require('../../_lib/build_formatting_tokens_reg_exp/index.js')\n\nfunction buildFormatLocale () {\n  // Note: in English, the names of days of the week and months are capitalized.\n  // If you are making a new locale based on this one, check if the same is true for the language you're working on.\n  // Generally, formatted dates should look like they are in the middle of a sentence,\n  // e.g. in Spanish language the weekdays and months should be in the lowercase.\n  var months3char = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n  var monthsFull = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n  var weekdays2char = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n  var weekdays3char = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n  var weekdaysFull = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n  var meridiemUppercase = ['AM', 'PM']\n  var meridiemLowercase = ['am', 'pm']\n  var meridiemFull = ['a.m.', 'p.m.']\n\n  var formatters = {\n    // Month: Jan, Feb, ..., Dec\n    'MMM': function (date) {\n      return months3char[date.getMonth()]\n    },\n\n    // Month: January, February, ..., December\n    'MMMM': function (date) {\n      return monthsFull[date.getMonth()]\n    },\n\n    // Day of week: Su, Mo, ..., Sa\n    'dd': function (date) {\n      return weekdays2char[date.getDay()]\n    },\n\n    // Day of week: Sun, Mon, ..., Sat\n    'ddd': function (date) {\n      return weekdays3char[date.getDay()]\n    },\n\n    // Day of week: Sunday, Monday, ..., Saturday\n    'dddd': function (date) {\n      return weekdaysFull[date.getDay()]\n    },\n\n    // AM, PM\n    'A': function (date) {\n      return (date.getHours() / 12) >= 1 ? meridiemUppercase[1] : meridiemUppercase[0]\n    },\n\n    // am, pm\n    'a': function (date) {\n      return (date.getHours() / 12) >= 1 ? meridiemLowercase[1] : meridiemLowercase[0]\n    },\n\n    // a.m., p.m.\n    'aa': function (date) {\n      return (date.getHours() / 12) >= 1 ? meridiemFull[1] : meridiemFull[0]\n    }\n  }\n\n  // Generate ordinal version of formatters: M -> Mo, D -> Do, etc.\n  var ordinalFormatters = ['M', 'D', 'DDD', 'd', 'Q', 'W']\n  ordinalFormatters.forEach(function (formatterToken) {\n    formatters[formatterToken + 'o'] = function (date, formatters) {\n      return ordinal(formatters[formatterToken](date))\n    }\n  })\n\n  return {\n    formatters: formatters,\n    formattingTokensRegExp: buildFormattingTokensRegExp(formatters)\n  }\n}\n\nfunction ordinal (number) {\n  var rem100 = number % 100\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st'\n      case 2:\n        return number + 'nd'\n      case 3:\n        return number + 'rd'\n    }\n  }\n  return number + 'th'\n}\n\nmodule.exports = buildFormatLocale\n","var buildDistanceInWordsLocale = require('./build_distance_in_words_locale/index.js')\nvar buildFormatLocale = require('./build_format_locale/index.js')\n\n/**\n * @category Locales\n * @summary English locale.\n */\nmodule.exports = {\n  distanceInWords: buildDistanceInWordsLocale(),\n  format: buildFormatLocale()\n}\n","var compareDesc = require('../compare_desc/index.js')\nvar parse = require('../parse/index.js')\nvar differenceInSeconds = require('../difference_in_seconds/index.js')\nvar differenceInMonths = require('../difference_in_months/index.js')\nvar enLocale = require('../locale/en/index.js')\n\nvar MINUTES_IN_DAY = 1440\nvar MINUTES_IN_ALMOST_TWO_DAYS = 2520\nvar MINUTES_IN_MONTH = 43200\nvar MINUTES_IN_TWO_MONTHS = 86400\n\n/**\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * @param {Date|String|Number} dateToCompare - the date to compare with\n * @param {Date|String|Number} date - the other date\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {Object} [options.locale=enLocale] - the locale object\n * @returns {String} the distance in words\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * var result = distanceInWords(\n *   new Date(2014, 6, 2),\n *   new Date(2015, 0, 1)\n * )\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * var result = distanceInWords(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   {includeSeconds: true}\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * var result = distanceInWords(\n *   new Date(2016, 0, 1),\n *   new Date(2015, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * var eoLocale = require('date-fns/locale/eo')\n * var result = distanceInWords(\n *   new Date(2016, 7, 1),\n *   new Date(2015, 0, 1),\n *   {locale: eoLocale}\n * )\n * //=> 'pli ol 1 jaro'\n */\nfunction distanceInWords (dirtyDateToCompare, dirtyDate, dirtyOptions) {\n  var options = dirtyOptions || {}\n\n  var comparison = compareDesc(dirtyDateToCompare, dirtyDate)\n\n  var locale = options.locale\n  var localize = enLocale.distanceInWords.localize\n  if (locale && locale.distanceInWords && locale.distanceInWords.localize) {\n    localize = locale.distanceInWords.localize\n  }\n\n  var localizeOptions = {\n    addSuffix: Boolean(options.addSuffix),\n    comparison: comparison\n  }\n\n  var dateLeft, dateRight\n  if (comparison > 0) {\n    dateLeft = parse(dirtyDateToCompare)\n    dateRight = parse(dirtyDate)\n  } else {\n    dateLeft = parse(dirtyDate)\n    dateRight = parse(dirtyDateToCompare)\n  }\n\n  var seconds = differenceInSeconds(dateRight, dateLeft)\n  var offset = dateRight.getTimezoneOffset() - dateLeft.getTimezoneOffset()\n  var minutes = Math.round(seconds / 60) - offset\n  var months\n\n  // 0 up to 2 mins\n  if (minutes < 2) {\n    if (options.includeSeconds) {\n      if (seconds < 5) {\n        return localize('lessThanXSeconds', 5, localizeOptions)\n      } else if (seconds < 10) {\n        return localize('lessThanXSeconds', 10, localizeOptions)\n      } else if (seconds < 20) {\n        return localize('lessThanXSeconds', 20, localizeOptions)\n      } else if (seconds < 40) {\n        return localize('halfAMinute', null, localizeOptions)\n      } else if (seconds < 60) {\n        return localize('lessThanXMinutes', 1, localizeOptions)\n      } else {\n        return localize('xMinutes', 1, localizeOptions)\n      }\n    } else {\n      if (minutes === 0) {\n        return localize('lessThanXMinutes', 1, localizeOptions)\n      } else {\n        return localize('xMinutes', minutes, localizeOptions)\n      }\n    }\n\n  // 2 mins up to 0.75 hrs\n  } else if (minutes < 45) {\n    return localize('xMinutes', minutes, localizeOptions)\n\n  // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return localize('aboutXHours', 1, localizeOptions)\n\n  // 1.5 hrs up to 24 hrs\n  } else if (minutes < MINUTES_IN_DAY) {\n    var hours = Math.round(minutes / 60)\n    return localize('aboutXHours', hours, localizeOptions)\n\n  // 1 day up to 1.75 days\n  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {\n    return localize('xDays', 1, localizeOptions)\n\n  // 1.75 days up to 30 days\n  } else if (minutes < MINUTES_IN_MONTH) {\n    var days = Math.round(minutes / MINUTES_IN_DAY)\n    return localize('xDays', days, localizeOptions)\n\n  // 1 month up to 2 months\n  } else if (minutes < MINUTES_IN_TWO_MONTHS) {\n    months = Math.round(minutes / MINUTES_IN_MONTH)\n    return localize('aboutXMonths', months, localizeOptions)\n  }\n\n  months = differenceInMonths(dateRight, dateLeft)\n\n  // 2 months up to 12 months\n  if (months < 12) {\n    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH)\n    return localize('xMonths', nearestMonth, localizeOptions)\n\n  // 1 year up to max Date\n  } else {\n    var monthsSinceStartOfYear = months % 12\n    var years = Math.floor(months / 12)\n\n    // N years up to 1 years 3 months\n    if (monthsSinceStartOfYear < 3) {\n      return localize('aboutXYears', years, localizeOptions)\n\n    // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return localize('overXYears', years, localizeOptions)\n\n    // N years 9 months up to N year 12 months\n    } else {\n      return localize('almostXYears', years + 1, localizeOptions)\n    }\n  }\n}\n\nmodule.exports = distanceInWords\n","var distanceInWords = require('../distance_in_words/index.js')\n\n/**\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n *\n * @description\n * Return the distance between the given date and now in words.\n *\n * | Distance to now                                                   | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance to now     | Result               |\n * |---------------------|----------------------|\n * | 0 secs ... 5 secs   | less than 5 seconds  |\n * | 5 secs ... 10 secs  | less than 10 seconds |\n * | 10 secs ... 20 secs | less than 20 seconds |\n * | 20 secs ... 40 secs | half a minute        |\n * | 40 secs ... 60 secs | less than a minute   |\n * | 60 secs ... 90 secs | 1 minute             |\n *\n * @param {Date|String|Number} date - the given date\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result specifies if the second date is earlier or later than the first\n * @param {Object} [options.locale=enLocale] - the locale object\n * @returns {String} the distance in words\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * var result = distanceInWordsToNow(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * var result = distanceInWordsToNow(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   {includeSeconds: true}\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * var result = distanceInWordsToNow(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in about 1 year'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * var eoLocale = require('date-fns/locale/eo')\n * var result = distanceInWordsToNow(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> 'pli ol 1 jaro'\n */\nfunction distanceInWordsToNow (dirtyDate, dirtyOptions) {\n  return distanceInWords(Date.now(), dirtyDate, dirtyOptions)\n}\n\nmodule.exports = distanceInWordsToNow\n","import toNow from 'date-fns/distance_in_words_to_now'\n\nexport default (date, locale, converterOptions) => {\n  const { includeSeconds, addSuffix = true } = converterOptions\n  return toNow(date, {\n    locale,\n    includeSeconds,\n    addSuffix\n  })\n}\n","import defaultConverter from './converter'\n\nexport const createTimeago = (opts = {}) => {\n  const locales = opts.locales || {}\n  const name = opts.name || 'Timeago'\n\n  return {\n    name,\n\n    props: {\n      datetime: {\n        required: true\n      },\n      title: {\n        type: [String, Boolean]\n      },\n      locale: {\n        type: String\n      },\n      autoUpdate: {\n        type: [Number, Boolean]\n      },\n      converter: {\n        type: Function\n      },\n      converterOptions: {\n        type: Object\n      }\n    },\n\n    data() {\n      return {\n        timeago: this.getTimeago()\n      }\n    },\n\n    mounted() {\n      this.startUpdater()\n    },\n\n    beforeDestroy() {\n      this.stopUpdater()\n    },\n\n    render(h) {\n      return h(\n        'time',\n        {\n          attrs: {\n            datetime: new Date(this.datetime),\n            title:\n              typeof this.title === 'string' ?\n                this.title :\n                this.title === false ?\n                  null :\n                  this.timeago\n          }\n        },\n        [this.timeago]\n      )\n    },\n\n    methods: {\n      getTimeago(datetime) {\n        const converter = this.converter || opts.converter || defaultConverter\n        return converter(datetime || this.datetime, locales[this.locale || opts.locale], this.converterOptions || {})\n      },\n\n      convert(datetime) {\n        this.timeago = this.getTimeago(datetime)\n      },\n\n      startUpdater() {\n        if (this.autoUpdate) {\n          const autoUpdaye = this.autoUpdate === true ? 60 : this.autoUpdate\n          this.updater = setInterval(() => {\n            this.convert()\n          }, autoUpdaye * 1000)\n        }\n      },\n\n      stopUpdater() {\n        if (this.updater) {\n          clearInterval(this.updater)\n          this.updater = null\n        }\n      }\n    },\n\n    watch: {\n      autoUpdate(newValue) {\n        this.stopUpdater()\n        if (newValue) {\n          this.startUpdater()\n        }\n      },\n\n      datetime() {\n        this.convert()\n      },\n      locale() {\n        this.convert()\n      },\n      converter() {\n        this.convert()\n      },\n      converterOptions: {\n        handler() {\n          this.convert()\n        },\n        deep: true\n      }\n    }\n  }\n}\n\nexport const install = (Vue, opts) => {\n  const Component = createTimeago(opts)\n  Vue.component(Component.name, Component)\n}\n\nexport const converter = defaultConverter\n\nexport default install\n"],"names":["argument","Date","MILLISECONDS_IN_HOUR","MILLISECONDS_IN_MINUTE","DEFAULT_ADDITIONAL_DIGITS","parseTokenDateTimeDelimeter","parseTokenPlainTime","parseTokenYY","parseTokensYYY","parseTokenYYYY","parseTokensYYYYY","parseTokenMM","parseTokenDDD","parseTokenMMDD","parseTokenWww","parseTokenWwwD","parseTokenHH","parseTokenHHMM","parseTokenHHMMSS","parseTokenTimezone","parseTokenTimezoneZ","parseTokenTimezoneHH","parseTokenTimezoneHHMM","dayOfISOYear","isoYear","week","day","date","setUTCFullYear","diff","getUTCDay","setUTCDate","getUTCDate","dirtyOptions","isDate","getTime","additionalDigits","Number","dateStrings","dateString","timeString","array","split","test","token","exec","time","replace","timezone","splitDateString","parseYearResult","parseTokenYYY","parseTokenYYYYY","yearString","year","parseInt","restDateString","slice","length","centuryString","parseYear","month","dayOfYear","dayOfWeek","parseDate","offset","timestamp","hours","minutes","parseFloat","seconds","parseTime","timezoneString","absoluteOffset","getTimezoneOffset","dirtyDateLeft","dirtyDateRight","timeLeft","parse","timeRight","dateLeft","dateRight","differenceInMilliseconds","Math","floor","ceil","getFullYear","getMonth","sign","compareAsc","difference","abs","differenceInCalendarMonths","setMonth","commonFormatterKeys","formatters","formatterKeys","key","hasOwnProperty","push","formattingTokens","concat","sort","reverse","RegExp","join","months3char","monthsFull","weekdays2char","weekdays3char","weekdaysFull","meridiemUppercase","meridiemLowercase","meridiemFull","MMM","MMMM","dd","getDay","ddd","dddd","A","getHours","a","aa","forEach","formatterToken","number","rem100","ordinal","formattingTokensRegExp","buildFormattingTokensRegExp","distanceInWords","distanceInWordsLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","localize","count","options","result","addSuffix","comparison","buildDistanceInWordsLocale","format","buildFormatLocale","MINUTES_IN_DAY","MINUTES_IN_ALMOST_TWO_DAYS","MINUTES_IN_MONTH","MINUTES_IN_TWO_MONTHS","dirtyDateToCompare","dirtyDate","compareDesc","locale","enLocale","localizeOptions","Boolean","months","differenceInSeconds","round","includeSeconds","differenceInMonths","monthsSinceStartOfYear","years","now","converterOptions","toNow","createTimeago","opts","locales","name","String","Function","Object","this","getTimeago","startUpdater","stopUpdater","h","datetime","title","timeago","converter","defaultConverter","autoUpdate","autoUpdaye","updater","setInterval","convert","newValue","install","Vue","Component","component"],"mappings":"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"}